#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application d'analyse PDF avec Azure AI
"""

import os
import sys
from pathlib import Path

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    try:
        import flask
        import pdf2image
        import openpyxl
        import requests
        print("‚úÖ Toutes les d√©pendances Python sont install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Installez les d√©pendances avec: pip install -r requirements.txt")
        return False
    
    # V√©rifier Poppler
    try:
        from pdf2image import convert_from_path
        # Test simple pour v√©rifier que poppler est disponible
        print("‚úÖ Poppler est configur√©")
    except Exception as e:
        print("‚ùå Poppler n'est pas configur√© correctement")
        print("Installez Poppler:")
        print("  macOS: brew install poppler")
        print("  Ubuntu: sudo apt-get install poppler-utils")
        print("  Windows: T√©l√©chargez depuis https://github.com/oschwartz10612/poppler-windows/releases/")
        return False
    
    return True

def check_config():
    """V√©rifie la configuration"""
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ö†Ô∏è  Fichier .env non trouv√©")
        print("Copiez env_example.txt vers .env et configurez vos cl√©s Azure")
        return False
    
    # V√©rifier les variables d'environnement
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = ['AZURE_AI_ENDPOINT', 'AZURE_AI_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        print("Configurez ces variables dans le fichier .env")
        return False
    
    print("‚úÖ Configuration Azure AI d√©tect√©e")
    return True

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    directories = ['uploads', 'images', 'output', 'templates', 'static/js']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    print("‚úÖ R√©pertoires cr√©√©s")

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de l'application d'analyse PDF avec Azure AI")
    print("=" * 60)
    
    # V√©rifications pr√©alables
    if not check_dependencies():
        sys.exit(1)
    
    if not check_config():
        print("\n‚ö†Ô∏è  L'application peut d√©marrer mais certaines fonctionnalit√©s peuvent ne pas fonctionner")
        print("Configurez Azure AI pour une utilisation compl√®te")
    
    create_directories()
    
    print("\nüéØ D√©marrage du serveur...")
    print("üì± Ouvrez votre navigateur sur: http://localhost:5000")
    print("üõë Appuyez sur Ctrl+C pour arr√™ter le serveur")
    print("=" * 60)
    
    # Importer et d√©marrer l'application
    try:
        from app import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Arr√™t du serveur")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main() 